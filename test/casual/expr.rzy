
type
  Point = Record
    x : R{0,255};
    y : R{0,255};
  end

component
  Expr
    slot     inTick( x: R{0,255} );
    response inTack( x: R{0,255} ):R{0,255};
    signal   out1tick( x: R{0,255} );
    query    out1tack( x: R{0,255} ):R{0,255};
    signal   out2tick( x: R{0,255} );
    query    out2tack( x: R{0,255} ):R{0,255};
    signal   out3tick( x: R{0,255} );
    query    out3tack( x: R{0,255} ):R{0,255};
    query    out4tack():Point;
    signal   out4tock();
      
  implementation elementary
    
    var
      a : Array{10,Point} = [ ( x := 10, y := 20 ) ];
      f : R{0,255} = 20;
    
    function foo( x, y, z: R{0,255} ):R{0,255}
      if x > z then
        a[(z*2+y) mod 100].x := x;
      else
        t : R{0,510} = y + out4tack().x;
        if t > 255 then
          t := 255;
        end
        a[out2tack(x)-z].y := R{0,255}( t );
      end
      return (x + y * z + a[out1tack(x)].y * a[out1tack(y)].x) mod 256;
    end
    
    slot inTick( x: R{0,255} )
      f := foo( out1tack( x ), out2tack( out3tack(  (x + 10 * 5) mod 100 ) ), (foo( 1, 2, 3) * 3 + 2) and 127 );
    end

    response inTack( x: R{0,255} ):R{0,255}
      return f;
    end

  end

