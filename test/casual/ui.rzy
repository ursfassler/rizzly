
interface
  Mode
    function setTime( seconds: U{17} );
    function showTime( seconds: U{17} );
  end
  
  TimeDisplay
    function time( hour: U{5}; minute, second: U{6} );
  end  
  
  Time
    function time( seconds: U{17} );
  end
  
  TimeConfig
    function time( seconds: U{17} );
    function hasValidTime():Boolean;
    function getTime():U{17};
  end
  
  GenericEvent
    function evt();
  end  
  
   Switch
    function switch( value: Boolean );
  end  
  
component
  Ui
    input
      time      : Time;
      control   : Mode;
      config    : TimeConfig;
      hour      : GenericEvent;
      minute    : GenericEvent;
      tick      : GenericEvent;
    
    output
      timeDisp  : TimeDisplay;
      visible   : Switch;

  implementation hfsm( Top )
    state Top( ShowTime )
      var
        shour:    U{5};
        smin:     U{6};
      
      function config.getTime():U{17}
        return  0;
      end
      
      function config.hasValidTime():Boolean
        return False;
      end

      transition 
        Top to ShowTime by control.showTime( seconds: U{17} ) do
          timeDisp.time( (seconds / (60*60)) and 31, (seconds / 60) mod 60, seconds mod 60 );
        end

        Top to SetTime by control.setTime( seconds: U{17} ) do
          shour   := (seconds / (60*60)) and 24;
          smin    := (seconds / 60) mod 60;
          timeDisp.time( shour, smin, seconds mod 60 );
        end

        SetTime to ShowTime by control.showTime( seconds: U{17} ) do
          timeDisp.time( (seconds / (60*60)) and 31, (seconds / 60) mod 60, seconds mod 60 );
        end


      state ShowTime
        transition 
          ShowTime to ShowTime by time.time( seconds: U{17} ) do
            timeDisp.time( (seconds / (60*60)) and 31, (seconds / 60) mod 60, seconds mod 60 );
          end
      end

      state SetTime( Visible )
        entry
          write := False;
        end
        
        var
          write:    Boolean;
        
        function config.getTime():U{17}
          if write then
            return  ((shour*60)+smin)*60;
          else
            return -1;
          end
        end
        
        function config.hasValidTime():Boolean
          return True;
        end
        
        transition 
          SetTime to SetTime by hour.evt() do
            if not write then
              write := True;
            end
              
            shour := (shour + 1) mod 24;
            timeDisp.time( shour, smin, 0 );
          end

          SetTime to SetTime by minute.evt() do
            if not write then
              write := True;
            end

            smin := (smin + 1) mod 60;
            timeDisp.time( shour, smin, 0 );
          end
        
        state Visible
          entry
            timer   := 80;
          end
          var
            timer   : U{7};
          transition 
            Visible to Visible by tick.evt() if timer > 0 do
              timer := timer - 1;
            end
        end

        state Hidden
          entry
            timer   := 20;
            visible.switch( False );
          end
          exit
            visible.switch( True );
          end
          var
            timer   : U{5};
            
          transition 
            Hidden to Hidden by tick.evt() if timer > 0 do
              timer := timer - 1;
            end
        end
        
      transition 
        Visible to Hidden by tick.evt() if timer = 0;
        Hidden to Visible by tick.evt() if timer = 0;
      end
    end
  end
  
